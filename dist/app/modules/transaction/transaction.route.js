"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsRouter = void 0;
const express_1 = require("express");
const checkAuth_1 = require("../../middlewares/checkAuth");
const user_interface_1 = require("../users/user.interface");
const transaction_zodValidation_1 = require("./transaction.zodValidation");
const zodValidatorTransaction_1 = require("../../middlewares/zodValidatorTransaction");
const transaction_controller_1 = require("./transaction.controller");
const router = (0, express_1.Router)();
router.post("/add-money", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.USER, user_interface_1.userRole.AGENT), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.addMoneySchema), transaction_controller_1.TransactionController.addMoney);
router.post("/withdraw", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.USER, user_interface_1.userRole.AGENT), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.withdrawMoneySchema), transaction_controller_1.TransactionController.withdrawMoney);
router.post("/send-money", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.USER), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.sendMoneySchema), transaction_controller_1.TransactionController.sendMoney);
router.get("/history", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.USER, user_interface_1.userRole.AGENT), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.transactionHistorySchema), transaction_controller_1.TransactionController.getMyTransactions);
router.get("/all", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.ADMIN), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.transactionHistorySchema), transaction_controller_1.TransactionController.getAllTransactions);
router.get("/:transactionId", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.USER, user_interface_1.userRole.AGENT, user_interface_1.userRole.ADMIN), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.transactionDetailsSchema), transaction_controller_1.TransactionController.getTransactionDetails);
router.post("/cash-in", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.AGENT), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.agentCashSchema), transaction_controller_1.TransactionController.agentCashIn);
router.post("/cash-out", (0, checkAuth_1.checkAuth)(user_interface_1.userRole.AGENT), (0, zodValidatorTransaction_1.zodValidatorTransaction)(transaction_zodValidation_1.agentCashSchema), transaction_controller_1.TransactionController.agentCashOut);
exports.TransactionsRouter = router;
